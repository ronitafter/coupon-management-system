   
package com.ronit.facades;

import java.util.List;

import com.ronit.beans.Company;
import com.ronit.beans.Customer;
import com.ronit.dao.CompaniesDao;
import com.ronit.dao.CompaniesDbDao;
import com.ronit.dao.CouponsDao;
import com.ronit.dao.CouponsDbDao;
import com.ronit.dao.CustomersDao;
import com.ronit.dao.CustomersDbDao;
import com.ronit.exceptions.CouponSystemException;

public class AdministratorFacade extends ClientFacade {

	private String email = "admin@admin.com";
	private String passwaord = "admin";

	public AdministratorFacade(CompaniesDao companiesDao, CustomersDao customersDao, CouponsDao couponsDao) {
		super(companiesDao, customersDao, couponsDao);
		// TODO Auto-generated constructor stub
	}

	/**
	 * @param email and password - the admin email and password
	 * @return true if email and passwaord exists in the data base and log in
	 * @throws CouponSystemException
	 */
	public boolean login(String email, String passwaord) {
		return this.email.equals(email) && this.passwaord.equals(passwaord);

	}

	/**
	 * @param company the company to add to the system
	 * @return the id of the created company as generated by the data source
	 * @throws CouponSystemException
	 */
	public int addCompany(Company company) throws CouponSystemException {
		if (this.companiesDao.isCompanyExistsByName(company.getName())) {
			throw new CouponSystemException("addCompany failed the name " + company.getName() + " already exists");
		}
		if (this.companiesDao.isCompanyExistsByEmail(company.getEmail())) {
			throw new CouponSystemException("addCompany failed the email " + company.getEmail() + " already exists");
		}
		return this.companiesDao.addCompany(company);
	}

	public void updateCompany(Company company) throws CouponSystemException {
		Company companyFromDB = companiesDao.getOneCompany(company.getCompanyID());
		companyFromDB.setEmail(company.getEmail());
		companyFromDB.setPassword(company.getPassword());
		companiesDao.updateCompany(companyFromDB);
	}

	/**
	 * delete this company together with its coupons and all purchases
	 * 
	 * @param companyID the company to delete
	 * @throws CouponSystemException
	 */
	public void deleteCompany(int companyID) throws CouponSystemException {
		// 1. delete all purchases of the company coupons
		couponsDao.deletCouponPurchaseOfCompany(companyID);
		// 2. delete all company coupons
		couponsDao.deletCompanyCoupons(companyID);
		// 3. delete the company
		companiesDao.deleteCompany(companyID);
	}

	public List<Company> getAllCompanies() throws CouponSystemException {
		return companiesDao.getAllCompanies();

	}

	public Company getOneCompany(int companyID) throws CouponSystemException {
		return companiesDao.getOneCompany(companyID);
	}

	public int addCustomer(Customer customer) throws CouponSystemException {
		if (this.customersDao.isCustomerExistsByEmail(customer.getEmail())) {
			throw new CouponSystemException("addCustomer failed the email " + customer.getEmail() + " already exists");
		}
		return this.customersDao.addCustomer(customer);
	}

	public void updateCustomer(Customer customer) throws CouponSystemException {
		customersDao.updateCustomer(customer);

	}

	public void deleteCustomer(int CustomerID) throws CouponSystemException {
		couponsDao.deletCouponPurchaseOfCustomer(CustomerID);
		customersDao.deleteCustomer(CustomerID);
	}

	public List<Customer> getAllCustomers() throws CouponSystemException {
		return customersDao.getAllCustomers();

	}

	public Customer getOneCustomer(int CustomerID) throws CouponSystemException {
		return customersDao.getOneCustomer(CustomerID);

	}

}
